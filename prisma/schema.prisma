// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String      @id @unique @default(uuid())
  name                String
  email               String      @unique
  step                Steps[]
  username            String      @unique
  password            String
  publickey           String
  privatekey          String
  iv                  String?
  Friends             String[]
  Sleep               Sleep[]
  Request             String[]
  RequestFriend       String[]
  challenge           Challenge[]
  Notification        String[]
  Participated        String[]
  HistoryParticipated String[]
  HistoryCreated      String[]
  Stake               Stake?
}

model Challenge {
  id               String            @id @unique @default(uuid())
  name             String
  memberqty        Int
  members          String[]
  userid           String
  Dailystep        Int?
  Amount           Int
  Totalamount      Int
  types            CommpetionType    @default(Steps)
  Digital_Currency String
  days             Int
  type             Challengetype     @default(public)
  user             User              @relation(fields: [userid], references: [id])
  startdate        String
  enddate          String
  status           Completed         @default(CurrentlyRunning)
  Request          String[]
  Hours            String?
  PayoutStatus     Status            @default(pending)
  Payoutpeople     PayoutPerson[]
  Remaingpeople    RemainingPerson[]
}

model PayoutPerson {
  id          String    @id @default(uuid())
  challengeId String
  userId      String
  Challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([challengeId, userId])
}

model RemainingPerson {
  id          String    @id @default(uuid())
  challengeId String
  userId      String
  Challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([challengeId, userId])
}

model Steps {
  id     String @id @default(uuid())
  steps  String
  day    String
  userid String
  user   User   @relation(references: [id], fields: [userid])
}

model Sleep {
  id     String @id @default(uuid())
  Hours  String
  day    String
  userid String
  user   User   @relation(references: [id], fields: [userid])
}

model Stake {
  id           String        @id @unique @default(uuid())
  amount       Int
  Days         Int
  Hours        String
  startdate    String
  enddate      String
  Userid       String        @unique
  Status       Completed     @default(CurrentlyRunning)
  User         User          @relation(references: [id], fields: [Userid])
  StakePayment StakePayment?
}

model StakePayment {
  id      String @id @default(uuid())
  amount  Float
  Status   Status @default(pending)
  Stake   Stake  @relation(fields: [stakeId], references: [id])
  stakeId String @unique
}

enum Challengetype {
  public
  private
}

enum Status {
  pending
  payoutsucess
  completed
}

enum Completed {
  CurrentlyRunning
  Completed
}

enum CommpetionType {
  Steps
  Sleep
}
